// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  relationMode = "prisma"
}

// Using these for virtuous account details.  Was used by Next Auth for OAuth Clients.  However, credentials method on Next Auth is not supported
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  accounts Account[]
  sessions Session[]
  Post     Post[]
  APISettings apiSettings?
  RESettings  reSettings?
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String

  author User @relation(fields: [authorId], references: [id])

  @@map(name: "posts")
}

model apiSettings {
  id        String   @id @default(cuid())
  virtuousAPI     String @db.MediumText

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  userId  String  @unique
  user User @relation(fields: [userId], references: [id])
  @@map(name: "apiSettings")
}

model reSettings {
  id                          String   @id @default(cuid())
  token_type                  String
  expires_in                  Int
  refresh_token               String?  @db.Text
  access_token                String?  @db.Text
  environment_id              String
  environment_name            String
  legal_entity_id             String
  legal_entity_name           String
  user_id                     String
  email                       String
  family_name                 String
  given_name                  String
  refresh_token_expires_in    Int
  mode                        String?
  scope                       String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  userId  String  @unique
  user User @relation(fields: [userId], references: [id])
  @@map(name: "reSettings")
}

model giftBatches {
  id                          String   @id @default(cuid())
  batch_name                  String    @unique
  synced                      Boolean  @default(false)
  syncedAt                    DateTime? @map(name: "synced_at")
  createdAt                   DateTime @default(now()) @map(name: "created_at")
  updatedAt                   DateTime @default(now()) @map(name: "updated_at")
}

model gifts {
  gift_id                     String @id @default(cuid())
  id                          Int  @unique
  transactionSource           String?
  transactionId               String?
  contactId                   Int?
  contactName                 String?
  contactUrl                  String?
  giftType                    String?
  giftTypeFormatted           String?
  giftDate                    DateTime? 
  giftDateFormatted           String?
  amount                      Decimal?
  amountFormatted             String?
  currencyCode                String?
  exchangeRate                Decimal?
  baseCurrencyCode            String?
  batch                       String?
  createDateTimeUtc           DateTime? 
  createdByUser               String?
  modifiedDateTimeUtc         DateTime?
  modifiedByUser              String?
  segmentId                   Int?
  segment                     String?
  segmentCode                 String?
  segmentUrl                  String?
  mediaOutletId               Int?
  mediaOutlet                 String?
  grantId                     Int?
  grant                       String?
  grantUrl                    String?
  notes                       String?
  tribute                     String?
  tributeId                   Int?
  tributeType                 String?
  acknowledgeIndividualId    Int?
  receiptDate                 DateTime?
  receiptDateFormatted        String?
  contactPassthroughId        Int?
  contactPassthroughUrl       String?
  contactIndividualId         Int?
  cashAccountingCode          String?
  giftAskId                   Int?
  contactMembershipId         Int?
  giftUrl                     String?
  isTaxDeductible             Boolean?
  giftDesignations            Json?
  giftPremiums                Json?
  recurringGiftPayments       Json?
  pledgePayments              Json?
  customFields                Json?
  batch_name                  String
  synced                      Boolean? 
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
}

model virtuousProjects {
  project_id                    String @id @default(cuid())
  id                            Int  @unique
  name                          String?
  projectCode                   String?
  externalAccountingCode        String?
  onlineDisplayName             String?
  description                   String?
  type                          String?
  isPublic                      Boolean?
  isActive                      Boolean?
  isTaxDeductible               Boolean?
  giftSpecifications            Json?
  customFields                  Json?
  createdDateTimeUTC            DateTime?
  modifiedDateTimeUTC           DateTime?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  projectMappings                projectMapping[]  
}


model feProjects {
  id                            String @id @default(cuid())
  project_id                    Int @unique
  ui_project_id                 String @unique    
  projectCode                   String?
  location                      String?
  division                      String?
  department                    String?
  type                          String?
  status                        String?
  description                   String?
  added_by                      String?
  modified_by                   String?
  prevent_data_entry            Boolean?
  prevent_posting_after         Boolean?
  account_restrictions          Json?
  customFields                  Json?
  date_added                    DateTime?
  date_modified                 DateTime?
  start_date                    DateTime?
  end_date                      DateTime?
  posting_date                  DateTime?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  projectMappings                projectMapping[]                
}

model projectMapping { 
  id String @id @default(cuid())
  virProject    virtuousProjects      @relation(fields: [virProjectId], references: [project_id], onDelete: Cascade)
  virProjectId  String 
  reProject     feProjects            @relation(fields: [feProjectId], references: [id])
  feProjectId   String
  @@index([virProjectId, feProjectId])

}

model reAccounts { 
  account_code_id   Int  @id 
  value             Int
  category          String
  class             String?
  is_contra         Boolean
  is_control        Boolean
  description       String
}

