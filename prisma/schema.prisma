// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Using these for virtuous account details.  Was used by Next Auth for OAuth Clients.  However, credentials method on Next Auth is not supported
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime                @default(now()) @map(name: "created_at")
  updatedAt              DateTime                @default(now()) @map(name: "updated_at")
  accounts               Account[]
  sessions               Session[]
  Post                   Post[]
  APISettings            ApiSetting?
  RESettings             FeSetting?
  stripeCustomerId       String?                 @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?                 @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?                 @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?               @map(name: "stripe_current_period_end")
  giftBatches            GiftBatch[]
  gifts                  Gift[]
  virtuousProjects       VirtuousProject[]
  feProjects             FeProject[]
  projectMappings        ProjectMapping[]
  reAccounts             FeAccount[]
  reJournals             FeJournal[]
  feAccountCodes         FeAccountCode[]
  defaultJournal         String?
  setupStep              String?
  ProjectAccountMapping  ProjectAccountMapping[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String

  author User @relation(fields: [authorId], references: [id])

  @@map(name: "posts")
}

model ApiSetting {
  id          String   @id @default(cuid())
  virtuousAPI String   @db.MediumText
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])

  @@map(name: "api_settings")
}

model FeSetting {
  id                       String   @id @default(cuid())
  token_type               String
  expires_in               Int
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  environment_id           String
  environment_name         String
  legal_entity_id          String
  legal_entity_name        String
  user_id                  String
  email                    String
  family_name              String
  given_name               String
  refresh_token_expires_in Int
  mode                     String?
  scope                    String?
  createdAt                DateTime @default(now()) @map(name: "created_at")
  updatedAt                DateTime @default(now()) @map(name: "updated_at")
  userId                   String   @unique
  user                     User     @relation(fields: [userId], references: [id])

  @@map(name: "fe_settings")
}

model GiftBatch {
  id         String    @id @default(cuid())
  batch_name String    @unique
  synced     Boolean   @default(false)
  syncedAt   DateTime? @map(name: "synced_at")
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @default(now()) @map(name: "updated_at")
  userId     String
  user       User      @relation(fields: [userId], references: [id])

  @@unique([userId, batch_name])
  @@map(name: "gift_batches")
}

model Gift {
  gift_id                 String    @id @default(cuid())
  id                      Int
  transactionSource       String?
  transactionId           String?
  contactId               Int?
  contactName             String?
  contactUrl              String?
  giftType                String?
  giftTypeFormatted       String?
  giftDate                DateTime?
  giftDateFormatted       String?
  amount                  Decimal?
  amountFormatted         String?
  currencyCode            String?
  exchangeRate            Decimal?
  baseCurrencyCode        String?
  batch                   String?
  createDateTimeUtc       DateTime?
  createdByUser           String?
  modifiedDateTimeUtc     DateTime?
  modifiedByUser          String?
  segmentId               Int?
  segment                 String?
  segmentCode             String?
  segmentUrl              String?
  mediaOutletId           Int?
  mediaOutlet             String?
  grantId                 Int?
  grant                   String?
  grantUrl                String?
  notes                   String?
  tribute                 String?
  tributeId               Int?
  tributeType             String?
  acknowledgeIndividualId Int?
  receiptDate             DateTime?
  receiptDateFormatted    String?
  contactPassthroughId    Int?
  contactPassthroughUrl   String?
  contactIndividualId     Int?
  cashAccountingCode      String?
  giftAskId               Int?
  contactMembershipId     Int?
  giftUrl                 String?
  isTaxDeductible         Boolean?
  giftDesignations        Json?
  giftPremiums            Json?
  recurringGiftPayments   Json?
  pledgePayments          Json?
  customFields            Json?
  batch_name              String
  synced                  Boolean?
  createdAt               DateTime  @default(now()) @map(name: "created_at")
  updatedAt               DateTime  @default(now()) @map(name: "updated_at")
  userId                  String
  user                    User      @relation(fields: [userId], references: [id])

  @@unique([userId, id])
  @@map(name: "gifts")
}

model VirtuousProject {
  project_id             String                  @id @default(cuid())
  id                     Int
  name                   String?
  projectCode            String?
  externalAccountingCode String?
  onlineDisplayName      String?
  description            String?
  type                   String?
  isPublic               Boolean?
  isActive               Boolean?
  isTaxDeductible        Boolean?
  giftSpecifications     Json?
  customFields           Json?
  createdDateTimeUTC     DateTime?
  modifiedDateTimeUTC    DateTime?
  createdAt              DateTime                @default(now()) @map(name: "created_at")
  updatedAt              DateTime                @default(now()) @map(name: "updated_at")
  projectMappings        ProjectMapping[]
  userId                 String
  user                   User                    @relation(fields: [userId], references: [id])
  ProjectAccountMapping  ProjectAccountMapping[]

  @@unique([userId, id])
  @@map(name: "virtuous_projects")
}

model FeProject {
  id                    String           @id @default(cuid())
  project_id            Int
  ui_project_id         String
  projectCode           String?
  location              String?
  division              String?
  department            String?
  type                  String?
  status                String?
  description           String?
  added_by              String?
  modified_by           String?
  prevent_data_entry    Boolean?
  prevent_posting_after Boolean?
  account_restrictions  Json?
  customFields          Json?
  date_added            DateTime?
  date_modified         DateTime?
  start_date            DateTime?
  end_date              DateTime?
  posting_date          DateTime?
  createdAt             DateTime         @default(now()) @map(name: "created_at")
  updatedAt             DateTime         @default(now()) @map(name: "updated_at")
  projectMappings       ProjectMapping[]
  userId                String
  user                  User             @relation(fields: [userId], references: [id])

  @@unique([userId, project_id])
  @@map(name: "fe_projects")
}

model ProjectMapping {
  id           String          @id @default(cuid())
  virProject   VirtuousProject @relation(fields: [virProjectId], references: [project_id])
  virProjectId String
  feProject    FeProject       @relation(fields: [feProjectId], references: [id])
  feProjectId  String
  userId       String
  user         User            @relation(fields: [userId], references: [id])

  @@index([virProjectId, userId])
  @@map(name: "project_mappings")
}

model ProjectAccountMapping {
  id           String          @id @default(cuid())
  virProject   VirtuousProject @relation(fields: [virProjectId], references: [project_id])
  virProjectId String
  feAccount    FeAccount      @relation(fields: [feAccountId, userId], references: [account_id, userId])
  feAccountId  Int
  userId       String
  user         User            @relation(fields: [userId], references: [id])
  @@unique([virProjectId, userId])
  @@map(name: "project_account_mappings")
}

model FeAccount { 

  account_id            Int 
  account_number        String
  description           String?
  prevent_data_entry    Boolean?
  prevent_posting_data  Boolean?
  class                 String?
  cashflow              String?
  working_capital       String?
  custom_fields         Json?
  default_transaction_codes Json?
  date_added            DateTime?
  added_by              String?
  date_modified         DateTime?
  modified_by           String?
  createdAt             DateTime  @default(now()) @map(name: "created_at")
  updatedAt             DateTime  @default(now()) @map(name: "updated_at")
  userId                String
  user                  User  @relation(fields: [userId], references: [id])
  ProjectAccountMapping ProjectAccountMapping[]
  @@id([account_id, userId])
  @@unique([account_id, userId])
  @@map(name: "fe_accounts")

}

model FeAccountCode {
  account_code_id       Int                     @id
  value                 Int
  category              String
  class                 String?
  is_contra             Boolean
  is_control            Boolean
  description           String
  userId                String
  user                  User                    @relation(fields: [userId], references: [id])


  @@unique([userId, account_code_id])
  @@map(name: "fe_account_codes")
}

model FeJournal {
  id      Int
  code    String
  journal String
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  @@unique([userId, id])
  @@map(name: "fe_journals")
}
